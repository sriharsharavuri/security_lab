#include<bits/stdc++.h>
#include<gmp.h>
#include<gmpxx.h>
#include<stdlib.h>
#include<time.h>
using namespace std;

int* calcMod(int* a, int lena, int* b, int lenb, int& lenc){
	int* c;

	return c;
}

int* calcGcdPoly(int* a, int lena, int* b, int lenb, int& lenc){
	int* c = calcMod(a, lena, b, lenb, lenc);
	
	for(int i=0;i<n;i++){
		if(c[i]!=0)
			{a=b;b=c;lena=lenb;lenb=lenc;return calcGcdPoly(a, lena, b, lenb, lenc);}
	}
	return c;
}

int* squareAndMultiply(int *a, int alen, int* b, int blen, int clen){
	
}

int isPolynomial(int* f, int m, int p){
	int *u; u = new int[m*p+1];
	for(int i=0;i<=m*p+1;i++)u[i]=0;
	u[1]=1;
	int reslen = m*p;
	for(int i=1;i<=m/2;i++){
		u = squareAndMultiply(u, reslen, f, m, p);
		u = calcMod(u, reslen, f, m, reslen);u[1]--;int dlen;
		int *d = calcGcdPoly(f, m, u, reslen, dlen);
		if(d[0]!=1)return 0;
		for(int i=1;i<=dlen;i++){
			if(d[i]!=0)return 0;
		}
	}
	return 1;
}

int* genRandom(){
	int p, m;
	cin>>p>>m;
	int* res;
	res = new int[m+1];
	while(1){
		for(int i=0;i<=m;i++)
		{	
			srand((unsigned)time(0));
			int val = (rand()+1)%p;
			if(val==0)val=1;
			res[i]=val;
		}
		if(isPolynomial(res, m, p))return res;
	}
}

int main(){

}
